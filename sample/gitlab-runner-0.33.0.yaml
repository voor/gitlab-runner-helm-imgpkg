#! I am a sample that was automatically generated with build.sh

---
---
apiVersion: v1
kind: ServiceAccount
metadata:
  annotations: null
  labels:
    app: gitlab-runner-gitlab-runner
    chart: gitlab-runner-0.33.0
    heritage: Helm
    release: gitlab-runner
  name: gitlab-runner-gitlab-runner
  namespace: whereIgetinstalled
---
apiVersion: v1
data:
  check-live: |
    #!/bin/bash
    if /usr/bin/pgrep -f .*register-the-runner; then
      exit 0
    elif /usr/bin/pgrep gitlab.*runner; then
      exit 0
    else
      exit 1
    fi
  config.template.toml: |
    [[runners]]
      environment = ["GIT_SSL_NO_VERIFY=true"]
      tls-ca-file = "/home/gitlab-runner/.gitlab-runner/certs/certificates.crt"
      [runners.cache]
        Type = "s3"
        Path = "gitlab-runner-cache"
        Shared = false
        [runners.cache.s3]
          BucketName = ""
          BucketLocation = ""
      [runners.kubernetes]
        pod_annotations_overwrite_allowed = ".*"
  config.toml: |
    concurrent = 5
    check_interval = 30
    log_level = "info"
    listen_address = ':9252'

    [[runners]]
      tls-ca-file = "/home/gitlab-runner/.gitlab-runner/certs/certificates.crt"
      environment = ["GIT_SSL_NO_VERIFY=true"]
      [runners.kubernetes]
        image = ${KUBERNETES_IMAGE}
        helper_image = ${KUBERNETES_HELPER_IMAGE}
        namespace = ${KUBERNETES_NAMESPACE}
        pod_annotations_overwrite_allowed = ".*"
  configure: |
    set -e
    cp /init-secrets/* /secrets
  entrypoint: |
    #!/bin/bash
    set -e
    mkdir -p /home/gitlab-runner/.gitlab-runner/
    sed -e "s|\${KUBERNETES_IMAGE}|\"${KUBERNETES_IMAGE}\"|" \
      -e "s|\${KUBERNETES_HELPER_IMAGE}|\"${KUBERNETES_HELPER_IMAGE}\"|" \
      -e "s|\${KUBERNETES_NAMESPACE}|\"${KUBERNETES_NAMESPACE}\"|" \
      /configmaps/config.toml >/home/gitlab-runner/.gitlab-runner/config.toml


    # Set up environment variables for cache
    if [[ -f /secrets/accesskey && -f /secrets/secretkey ]]; then
      export CACHE_S3_ACCESS_KEY=$(cat /secrets/accesskey)
      export CACHE_S3_SECRET_KEY=$(cat /secrets/secretkey)
    fi

    if [[ -f /secrets/gcs-applicaton-credentials-file ]]; then
      export GOOGLE_APPLICATION_CREDENTIALS="/secrets/gcs-applicaton-credentials-file"
    elif [[ -f /secrets/gcs-application-credentials-file ]]; then
      export GOOGLE_APPLICATION_CREDENTIALS="/secrets/gcs-application-credentials-file"
    else
      if [[ -f /secrets/gcs-access-id && -f /secrets/gcs-private-key ]]; then
        export CACHE_GCS_ACCESS_ID=$(cat /secrets/gcs-access-id)
        # echo -e used to make private key multiline (in google json auth key private key is oneline with \n)
        export CACHE_GCS_PRIVATE_KEY=$(echo -e $(cat /secrets/gcs-private-key))
      fi
    fi

    if [[ -f /secrets/azure-account-name && -f /secrets/azure-account-key ]]; then
      export CACHE_AZURE_ACCOUNT_NAME=$(cat /secrets/azure-account-name)
      export CACHE_AZURE_ACCOUNT_KEY=$(cat /secrets/azure-account-key)
    fi

    if [[ -f /secrets/runner-registration-token ]]; then
      export REGISTRATION_TOKEN=$(cat /secrets/runner-registration-token)
    fi

    if [[ -f /secrets/runner-token ]]; then
      export CI_SERVER_TOKEN=$(cat /secrets/runner-token)
    fi

    # Register the runner
    if ! sh /configmaps/register-the-runner; then
      exit 1
    fi

    # Run pre-entrypoint-script
    if ! bash /configmaps/pre-entrypoint-script; then
      exit 1
    fi

    # Start the runner
    exec /entrypoint run --user=gitlab-runner \
      --working-directory=/home/gitlab-runner
  pre-entrypoint-script: ""
  register-the-runner: |
    #!/bin/bash
    MAX_REGISTER_ATTEMPTS=30

    for i in $(seq 1 "${MAX_REGISTER_ATTEMPTS}"); do
      echo "Registration attempt ${i} of ${MAX_REGISTER_ATTEMPTS}"
      /entrypoint register \
        --tls-ca-file /home/gitlab-runner/.gitlab-runner/certs/certificates.crt \
        --template-config /configmaps/config.template.toml \
        --non-interactive

      retval=$?

      if [ ${retval} = 0 ]; then
        break
      elif [ ${i} = ${MAX_REGISTER_ATTEMPTS} ]; then
        exit 1
      fi

      sleep 5
    done

    exit 0
kind: ConfigMap
metadata:
  annotations:
    kapp.k14s.io/num-versions: "3"
    kapp.k14s.io/versioned: ""
  labels:
    app: gitlab-runner-gitlab-runner
    chart: gitlab-runner-0.33.0
    heritage: Helm
    release: gitlab-runner
  name: gitlab-runner-gitlab-runner
  namespace: whereIgetinstalled
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  labels:
    app: gitlab-runner-gitlab-runner
    chart: gitlab-runner-0.33.0
    heritage: Helm
    release: gitlab-runner
  name: gitlab-runner-gitlab-runner
  namespace: whereIgetinstalled
rules:
- apiGroups:
  - ""
  resources:
  - '*'
  verbs:
  - '*'
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  labels:
    app: gitlab-runner-gitlab-runner
    chart: gitlab-runner-0.33.0
    heritage: Helm
    release: gitlab-runner
  name: gitlab-runner-gitlab-runner
  namespace: whereIgetinstalled
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: gitlab-runner-gitlab-runner
subjects:
- kind: ServiceAccount
  name: gitlab-runner-gitlab-runner
  namespace: sample-namespace
---
apiVersion: apps/v1
kind: Deployment
metadata:
  annotations:
    kbld.k14s.io/images: |
      - Metas:
        - Tag: ubuntu
          Type: resolved
          URL: gitlab/gitlab-runner:ubuntu
        URL: index.docker.io/gitlab/gitlab-runner@sha256:28d0d3f0faaa542b242df9e2ec95b2e3e3701cebde20bf68f098ad98f5df9ec4
  labels:
    app: gitlab-runner-gitlab-runner
    chart: gitlab-runner-0.33.0
    heritage: Helm
    release: gitlab-runner
  name: gitlab-runner-gitlab-runner
  namespace: whereIgetinstalled
spec:
  replicas: 1
  revisionHistoryLimit: 10
  selector:
    matchLabels:
      app: gitlab-runner-gitlab-runner
  template:
    metadata:
      annotations:
        checksum/configmap: 5f666372173222f74def5cbe397382973b71f3d0cad0588301b70360e86708e2
        checksum/secrets: e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855
        iam.amazonaws.com/role: .*
        prometheus.io/port: "9252"
        prometheus.io/scrape: "true"
      labels:
        app: gitlab-runner-gitlab-runner
        chart: gitlab-runner-0.33.0
        heritage: Helm
        release: gitlab-runner
    spec:
      containers:
      - command:
        - /usr/bin/dumb-init
        - --
        - /bin/bash
        - /configmaps/entrypoint
        env:
        - name: CI_SERVER_URL
          value: null
        - name: CLONE_URL
          value: ""
        - name: RUNNER_EXECUTOR
          value: kubernetes
        - name: REGISTER_LOCKED
          value: "true"
        - name: KUBERNETES_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        envFrom:
        - configMapRef:
            name: this_just_needs_to_be_unique-helper-image
        image: index.docker.io/gitlab/gitlab-runner@sha256:28d0d3f0faaa542b242df9e2ec95b2e3e3701cebde20bf68f098ad98f5df9ec4
        imagePullPolicy: IfNotPresent
        livenessProbe:
          exec:
            command:
            - /bin/bash
            - /configmaps/check-live
          failureThreshold: 3
          initialDelaySeconds: 60
          periodSeconds: 10
          successThreshold: 1
          timeoutSeconds: 1
        name: gitlab-runner-gitlab-runner
        ports:
        - containerPort: 9252
          name: metrics
        readinessProbe:
          exec:
            command:
            - /usr/bin/pgrep
            - gitlab.*runner
          failureThreshold: 3
          initialDelaySeconds: 10
          periodSeconds: 10
          successThreshold: 1
          timeoutSeconds: 1
        resources: {}
        securityContext:
          allowPrivilegeEscalation: false
        volumeMounts:
        - mountPath: /secrets
          name: runner-secrets
        - mountPath: /home/gitlab-runner/.gitlab-runner
          name: etc-gitlab-runner
        - mountPath: /configmaps
          name: configmaps
        - mountPath: /home/gitlab-runner/.gitlab-runner/certs/
          name: custom-certs
          readOnly: true
      initContainers:
      - command:
        - sh
        - /configmaps/configure
        env:
        - name: CI_SERVER_URL
          value: null
        - name: CLONE_URL
          value: ""
        - name: RUNNER_EXECUTOR
          value: kubernetes
        - name: REGISTER_LOCKED
          value: "true"
        - name: KUBERNETES_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        envFrom:
        - configMapRef:
            name: this_just_needs_to_be_unique-helper-image
        image: index.docker.io/gitlab/gitlab-runner@sha256:28d0d3f0faaa542b242df9e2ec95b2e3e3701cebde20bf68f098ad98f5df9ec4
        imagePullPolicy: IfNotPresent
        name: configure
        resources: {}
        securityContext:
          allowPrivilegeEscalation: false
        volumeMounts:
        - mountPath: /secrets
          name: runner-secrets
          readOnly: false
        - mountPath: /configmaps
          name: configmaps
          readOnly: true
        - mountPath: /init-secrets
          name: init-runner-secrets
          readOnly: true
        - mountPath: /home/gitlab-runner/.gitlab-runner/certs/
          name: custom-certs
          readOnly: true
      securityContext:
        fsGroup: 999
        runAsUser: 999
      serviceAccountName: gitlab-runner-gitlab-runner
      terminationGracePeriodSeconds: 3600
      volumes:
      - emptyDir:
          medium: Memory
        name: runner-secrets
      - emptyDir:
          medium: Memory
        name: etc-gitlab-runner
      - name: init-runner-secrets
        projected:
          sources:
          - secret:
              items:
              - key: runner-registration-token
                path: runner-registration-token
              - key: runner-token
                path: runner-token
              name: gitlab-runner-gitlab-runner
      - name: custom-certs
        secret:
          secretName: custom-certificates
      - configMap:
          name: gitlab-runner-gitlab-runner
        name: configmaps
---
apiVersion: v1
data:
  KUBERNETES_HELPER_IMAGE: registry.gitlab.com/gitlab-org/gitlab-runner/gitlab-runner-helper@sha256:086bac91e2f392d06c5353e85e9cc4e63e158428d5c90c42c759581b5a5aea3f
  KUBERNETES_IMAGE: index.docker.io/gitlab/gitlab-runner@sha256:2ed4b52db6f9ce0b6f07ee1a0e87013befa38940e00df95f0dbc6ecda4de2066
  RUNNER_TAG_LIST: ""
kind: ConfigMap
metadata:
  annotations:
    kapp.k14s.io/num-versions: "3"
    kapp.k14s.io/versioned: ""
    kbld.k14s.io/images: |
      - Metas:
        - Tag: ubuntu-v14.3.0
          Type: resolved
          URL: gitlab/gitlab-runner:ubuntu-v14.3.0
        URL: index.docker.io/gitlab/gitlab-runner@sha256:2ed4b52db6f9ce0b6f07ee1a0e87013befa38940e00df95f0dbc6ecda4de2066
      - Metas:
        - Tag: ubuntu-x86_64-v14.3.0
          Type: resolved
          URL: registry.gitlab.com/gitlab-org/gitlab-runner/gitlab-runner-helper:ubuntu-x86_64-v14.3.0
        URL: registry.gitlab.com/gitlab-org/gitlab-runner/gitlab-runner-helper@sha256:086bac91e2f392d06c5353e85e9cc4e63e158428d5c90c42c759581b5a5aea3f
  labels:
    purpose: kbld-image-helping
  name: this_just_needs_to_be_unique-helper-image
  namespace: whereIgetinstalled
---
apiVersion: v1
kind: Secret
metadata:
  name: custom-certificates
  namespace: whereIgetinstalled
stringData:
  certificates.crt: null
